/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from './axios-instance';
export interface ApplicationMessageDTO {
  message?: string;
  error?: string;
}

export interface ResetPasswordInputDTO {
  email?: string;
  code?: string;
  password?: string;
}

export interface JwtResponseDTO {
  jwtToken?: string;
  refreshToken?: string;
  role?: string;
  expiresIn?: string;
}

export interface RegisterCoachInputDTO {
  /**
   * @minLength 5
   * @maxLength 254
   */
  email: string;
  /**
   * @minLength 8
   * @maxLength 128
   */
  password: string;
  /**
   * @minLength 2
   * @maxLength 50
   */
  firstname: string;
  /**
   * @minLength 2
   * @maxLength 50
   */
  lastname: string;
}

export interface JwtRefreshDTO {
  jwtToken?: string;
  refreshToken?: string;
}

export interface LoginRequestDTO {
  email?: string;
  password?: string;
}

export interface UserProfileDTO {
  firstname?: string;
  lastname?: string;
  role?: string;
  email?: string;
  profileImageUrl?: string;
  planType?: string;
  status?: string;
}

export type GetAdvancedAnalytics200 = { [key: string]: unknown };

export type ExportData200 = { [key: string]: unknown };

/**
 * @summary Updates user password with verification code
 */
export const userPasswordReset = (
    resetPasswordInputDTO: ResetPasswordInputDTO,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/password-reset`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordInputDTO, signal
    },
      );
    }
  


export const getUserPasswordResetMutationOptions = <TError = void | ApplicationMessageDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userPasswordReset>>, TError,{data: ResetPasswordInputDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof userPasswordReset>>, TError,{data: ResetPasswordInputDTO}, TContext> => {

const mutationKey = ['userPasswordReset'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userPasswordReset>>, {data: ResetPasswordInputDTO}> = (props) => {
          const {data} = props ?? {};

          return  userPasswordReset(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UserPasswordResetMutationResult = NonNullable<Awaited<ReturnType<typeof userPasswordReset>>>
    export type UserPasswordResetMutationBody = ResetPasswordInputDTO
    export type UserPasswordResetMutationError = void | ApplicationMessageDTO

    /**
 * @summary Updates user password with verification code
 */
export const useUserPasswordReset = <TError = void | ApplicationMessageDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userPasswordReset>>, TError,{data: ResetPasswordInputDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof userPasswordReset>>,
        TError,
        {data: ResetPasswordInputDTO},
        TContext
      > => {

      const mutationOptions = getUserPasswordResetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Registers a new Coach
 */
export const registerCoach = (
    registerCoachInputDTO: RegisterCoachInputDTO,
 signal?: AbortSignal
) => {
      
      
      return customInstance<JwtResponseDTO>(
      {url: `/coach/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerCoachInputDTO, signal
    },
      );
    }
  


export const getRegisterCoachMutationOptions = <TError = void | ApplicationMessageDTO | JwtResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerCoach>>, TError,{data: RegisterCoachInputDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerCoach>>, TError,{data: RegisterCoachInputDTO}, TContext> => {

const mutationKey = ['registerCoach'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerCoach>>, {data: RegisterCoachInputDTO}> = (props) => {
          const {data} = props ?? {};

          return  registerCoach(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterCoachMutationResult = NonNullable<Awaited<ReturnType<typeof registerCoach>>>
    export type RegisterCoachMutationBody = RegisterCoachInputDTO
    export type RegisterCoachMutationError = void | ApplicationMessageDTO | JwtResponseDTO

    /**
 * @summary Registers a new Coach
 */
export const useRegisterCoach = <TError = void | ApplicationMessageDTO | JwtResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerCoach>>, TError,{data: RegisterCoachInputDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerCoach>>,
        TError,
        {data: RegisterCoachInputDTO},
        TContext
      > => {

      const mutationOptions = getRegisterCoachMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Refresh a user token
 */
export const refreshToken = (
    jwtRefreshDTO: JwtRefreshDTO,
 signal?: AbortSignal
) => {
      
      
      return customInstance<JwtResponseDTO>(
      {url: `/auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: jwtRefreshDTO, signal
    },
      );
    }
  


export const getRefreshTokenMutationOptions = <TError = void | JwtResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: JwtRefreshDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: JwtRefreshDTO}, TContext> => {

const mutationKey = ['refreshToken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshToken>>, {data: JwtRefreshDTO}> = (props) => {
          const {data} = props ?? {};

          return  refreshToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
    export type RefreshTokenMutationBody = JwtRefreshDTO
    export type RefreshTokenMutationError = void | JwtResponseDTO

    /**
 * @summary Refresh a user token
 */
export const useRefreshToken = <TError = void | JwtResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: JwtRefreshDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof refreshToken>>,
        TError,
        {data: JwtRefreshDTO},
        TContext
      > => {

      const mutationOptions = getRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Log in a user
 */
export const login = (
    loginRequestDTO: LoginRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customInstance<JwtResponseDTO>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestDTO, signal
    },
      );
    }
  


export const getLoginMutationOptions = <TError = void | JwtResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequestDTO}, TContext> => {

const mutationKey = ['login'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: LoginRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  login(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = LoginRequestDTO
    export type LoginMutationError = void | JwtResponseDTO

    /**
 * @summary Log in a user
 */
export const useLogin = <TError = void | JwtResponseDTO,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        {data: LoginRequestDTO},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Sends email for password reset
 */
export const sendEmailForPasswordReset = (
    email: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/send-password-reset-email/${email}`, method: 'GET', signal
    },
      );
    }
  

export const getSendEmailForPasswordResetQueryKey = (email: string,) => {
    return [`/user/send-password-reset-email/${email}`] as const;
    }

    
export const getSendEmailForPasswordResetQueryOptions = <TData = Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError = void | ApplicationMessageDTO>(email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSendEmailForPasswordResetQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sendEmailForPasswordReset>>> = ({ signal }) => sendEmailForPasswordReset(email, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SendEmailForPasswordResetQueryResult = NonNullable<Awaited<ReturnType<typeof sendEmailForPasswordReset>>>
export type SendEmailForPasswordResetQueryError = void | ApplicationMessageDTO


export function useSendEmailForPasswordReset<TData = Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError = void | ApplicationMessageDTO>(
 email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sendEmailForPasswordReset>>,
          TError,
          Awaited<ReturnType<typeof sendEmailForPasswordReset>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSendEmailForPasswordReset<TData = Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError = void | ApplicationMessageDTO>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sendEmailForPasswordReset>>,
          TError,
          Awaited<ReturnType<typeof sendEmailForPasswordReset>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSendEmailForPasswordReset<TData = Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError = void | ApplicationMessageDTO>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Sends email for password reset
 */

export function useSendEmailForPasswordReset<TData = Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError = void | ApplicationMessageDTO>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sendEmailForPasswordReset>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSendEmailForPasswordResetQueryOptions(email,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Re send user confirmation email
 */
export const resendUserEmail = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/resend-confirm-email`, method: 'GET', signal
    },
      );
    }
  

export const getResendUserEmailQueryKey = () => {
    return [`/user/resend-confirm-email`] as const;
    }

    
export const getResendUserEmailQueryOptions = <TData = Awaited<ReturnType<typeof resendUserEmail>>, TError = ApplicationMessageDTO>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof resendUserEmail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getResendUserEmailQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof resendUserEmail>>> = ({ signal }) => resendUserEmail(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof resendUserEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ResendUserEmailQueryResult = NonNullable<Awaited<ReturnType<typeof resendUserEmail>>>
export type ResendUserEmailQueryError = ApplicationMessageDTO


export function useResendUserEmail<TData = Awaited<ReturnType<typeof resendUserEmail>>, TError = ApplicationMessageDTO>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof resendUserEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof resendUserEmail>>,
          TError,
          Awaited<ReturnType<typeof resendUserEmail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useResendUserEmail<TData = Awaited<ReturnType<typeof resendUserEmail>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof resendUserEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof resendUserEmail>>,
          TError,
          Awaited<ReturnType<typeof resendUserEmail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useResendUserEmail<TData = Awaited<ReturnType<typeof resendUserEmail>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof resendUserEmail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Re send user confirmation email
 */

export function useResendUserEmail<TData = Awaited<ReturnType<typeof resendUserEmail>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof resendUserEmail>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getResendUserEmailQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get logged user profile
 */
export const getLoggedUserProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<UserProfileDTO>(
      {url: `/user/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetLoggedUserProfileQueryKey = () => {
    return [`/user/profile`] as const;
    }

    
export const getGetLoggedUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof getLoggedUserProfile>>, TError = void | UserProfileDTO>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedUserProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLoggedUserProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLoggedUserProfile>>> = ({ signal }) => getLoggedUserProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLoggedUserProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLoggedUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getLoggedUserProfile>>>
export type GetLoggedUserProfileQueryError = void | UserProfileDTO


export function useGetLoggedUserProfile<TData = Awaited<ReturnType<typeof getLoggedUserProfile>>, TError = void | UserProfileDTO>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedUserProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLoggedUserProfile>>,
          TError,
          Awaited<ReturnType<typeof getLoggedUserProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLoggedUserProfile<TData = Awaited<ReturnType<typeof getLoggedUserProfile>>, TError = void | UserProfileDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedUserProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLoggedUserProfile>>,
          TError,
          Awaited<ReturnType<typeof getLoggedUserProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLoggedUserProfile<TData = Awaited<ReturnType<typeof getLoggedUserProfile>>, TError = void | UserProfileDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedUserProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get logged user profile
 */

export function useGetLoggedUserProfile<TData = Awaited<ReturnType<typeof getLoggedUserProfile>>, TError = void | UserProfileDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLoggedUserProfile>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLoggedUserProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Confirms User email
 */
export const confirmUserEmail = (
    confirmationCode: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/confirm-email/${confirmationCode}`, method: 'GET', signal
    },
      );
    }
  

export const getConfirmUserEmailQueryKey = (confirmationCode: string,) => {
    return [`/user/confirm-email/${confirmationCode}`] as const;
    }

    
export const getConfirmUserEmailQueryOptions = <TData = Awaited<ReturnType<typeof confirmUserEmail>>, TError = void | ApplicationMessageDTO>(confirmationCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof confirmUserEmail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getConfirmUserEmailQueryKey(confirmationCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof confirmUserEmail>>> = ({ signal }) => confirmUserEmail(confirmationCode, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(confirmationCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof confirmUserEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ConfirmUserEmailQueryResult = NonNullable<Awaited<ReturnType<typeof confirmUserEmail>>>
export type ConfirmUserEmailQueryError = void | ApplicationMessageDTO


export function useConfirmUserEmail<TData = Awaited<ReturnType<typeof confirmUserEmail>>, TError = void | ApplicationMessageDTO>(
 confirmationCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof confirmUserEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof confirmUserEmail>>,
          TError,
          Awaited<ReturnType<typeof confirmUserEmail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useConfirmUserEmail<TData = Awaited<ReturnType<typeof confirmUserEmail>>, TError = void | ApplicationMessageDTO>(
 confirmationCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof confirmUserEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof confirmUserEmail>>,
          TError,
          Awaited<ReturnType<typeof confirmUserEmail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useConfirmUserEmail<TData = Awaited<ReturnType<typeof confirmUserEmail>>, TError = void | ApplicationMessageDTO>(
 confirmationCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof confirmUserEmail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Confirms User email
 */

export function useConfirmUserEmail<TData = Awaited<ReturnType<typeof confirmUserEmail>>, TError = void | ApplicationMessageDTO>(
 confirmationCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof confirmUserEmail>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getConfirmUserEmailQueryOptions(confirmationCode,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdvancedAnalytics = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetAdvancedAnalytics200>(
      {url: `/test/coach`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdvancedAnalyticsQueryKey = () => {
    return [`/test/coach`] as const;
    }

    
export const getGetAdvancedAnalyticsQueryOptions = <TData = Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError = ApplicationMessageDTO>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdvancedAnalyticsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdvancedAnalytics>>> = ({ signal }) => getAdvancedAnalytics(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdvancedAnalyticsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdvancedAnalytics>>>
export type GetAdvancedAnalyticsQueryError = ApplicationMessageDTO


export function useGetAdvancedAnalytics<TData = Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError = ApplicationMessageDTO>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdvancedAnalytics>>,
          TError,
          Awaited<ReturnType<typeof getAdvancedAnalytics>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdvancedAnalytics<TData = Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdvancedAnalytics>>,
          TError,
          Awaited<ReturnType<typeof getAdvancedAnalytics>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdvancedAnalytics<TData = Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdvancedAnalytics<TData = Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdvancedAnalytics>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdvancedAnalyticsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const exportData = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ExportData200>(
      {url: `/test/admin`, method: 'GET', signal
    },
      );
    }
  

export const getExportDataQueryKey = () => {
    return [`/test/admin`] as const;
    }

    
export const getExportDataQueryOptions = <TData = Awaited<ReturnType<typeof exportData>>, TError = ApplicationMessageDTO>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportData>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getExportDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof exportData>>> = ({ signal }) => exportData(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof exportData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ExportDataQueryResult = NonNullable<Awaited<ReturnType<typeof exportData>>>
export type ExportDataQueryError = ApplicationMessageDTO


export function useExportData<TData = Awaited<ReturnType<typeof exportData>>, TError = ApplicationMessageDTO>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof exportData>>,
          TError,
          Awaited<ReturnType<typeof exportData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useExportData<TData = Awaited<ReturnType<typeof exportData>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof exportData>>,
          TError,
          Awaited<ReturnType<typeof exportData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useExportData<TData = Awaited<ReturnType<typeof exportData>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportData>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useExportData<TData = Awaited<ReturnType<typeof exportData>>, TError = ApplicationMessageDTO>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof exportData>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getExportDataQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
